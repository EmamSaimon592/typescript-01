‚úÖ generic function with Array

function getFirstElement<T>(arr: T[]): T {
  return arr[0];
}

const firstNum = getFirstElement<number>([10, 20, 30]); // 10
const firstStr = getFirstElement(['a', 'b', 'c']); // "a"

console.log(firstNum);
console.log(firstStr);

....................................

‚úÖ Aysnc function in ts
async function getData(): Promise<string> {
  throw new Error("Something went wrong!");
}

üî∏ getData() ‡¶π‡¶≤ ‡¶è‡¶ï‡¶ü‡¶æ async function‡•§
üî∏ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶è‡¶ü‡¶æ ‡¶ï‡ßã‡¶® data return ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá, ‡¶¨‡¶∞‡¶Ç error ‡¶õ‡ßÅ‡¶Å‡ßú‡ßá ‡¶¶‡ßá‡ßü (throw)‡•§

async function run() {
  try {
    const data = await getData();  // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá error ‡¶π‡¶¨‡ßá
    console.log(data);
  } catch (error) {
    console.error("Error:", (error as Error).message); // error message ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
  }
}

üî∏ run() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® getData()-‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá await ‡¶¶‡¶ø‡ßü‡ßá‡•§
üî∏ ‡¶Ø‡ßá‡¶π‡ßá‡¶§‡ßÅ getData() error ‡¶¶‡ßá‡ßü, ‡¶§‡¶æ‡¶á try block ‡¶è ‡¶®‡¶æ ‡¶ó‡¶ø‡ßü‡ßá catch block-‡¶è ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü‡•§
üî∏ catch block ‡¶è ‡¶∏‡ßá‡¶á error message ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡•§

 ‡¶Ø‡¶¶‡¶ø Error ‡¶®‡¶æ ‡¶¶‡¶ø‡¶§‡¶æ‡¶Æ?
async function getData(): Promise<string> {
  return "Hello world!";
}
‡¶§‡¶æ‡¶π‡¶≤‡ßá output ‡¶π‡¶§:
Hello world!
------------------------------------------------------------


‚úÖ Enum
1. Auto-incremented Values (‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶∏‡ßç‡¶¨‡ßü‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶æ‡ßú‡ßá)
enum Color {
  Red,    // 0
  Green,  // 1
  Blue    // 2
}

2.Custom Numeric Values (‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶∞‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ):
enum Color {
  Red = 1,
  Green = 5,
  Blue = 10
}

3. String Enums (‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶∏‡¶π enum):
enum Direction {
  North = "NORTH",
  South = "SOUTH",
  East = "EAST",
  West = "WEST"
}

4. Heterogeneous Enum (number + string ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá)
enum Example {
  No = 0,
  Yes = "YES"
}

‡¶ï‡ßá‡¶® enum ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?
‚úÖ ‡¶ï‡ßã‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶® ‡¶ì ‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶∏‡¶π‡¶ú
‚úÖ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ú‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡ßú‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡ßü
‚úÖ ‡¶ü‡¶æ‡¶á‡¶™ ‡¶∏‡ßá‡¶´ ‚Äì ‡¶≠‡ßÅ‡¶≤ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ ‡¶ß‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶ï‡¶Æ‡ßç‡¶™‡¶æ‡¶á‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ‡ßá‡¶á

‚úî‡¶∂‡ßá‡¶∑ ‡¶ï‡¶•‡¶æ:
TypeScript ‡¶è enum ‡¶è‡¶ï‡¶ü‡¶ø powerful feature, ‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ constant values ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡¶≠‡¶æ‡¶¨‡ßá handle ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§ ‡¶è‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßã‡¶° ‡¶¨‡ßá‡¶∂‡¶ø readable ‡¶ì maintainable ‡¶π‡ßü‡•§

